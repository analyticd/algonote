(let* ((n (read))
       (a (make-array n))
       (f (if (evenp n) 0 1))
       (c (if (evenp n) (/ n 2) (/ (1- n) 2)))
       (b (make-array n)))
  (dotimes (i n)
    (setf (aref a i) (read)))
  (dotimes (i n)
    (let ((j (+ c (* (expt -1 (+ i f)) (truncate (1+ i) 2)))))
      (setf (aref b j)
	    (aref a i))))
  (loop with last = (1- n)
        for i from 0 to last
	do (princ (aref b i))
	unless (= i last) do (princ " "))
  (terpri))
