(let* ((n (read))
       (m (read))
       (x (make-array m))
       (y (make-array m))
       (w (make-array n :initial-element 1))
       (red (make-array n :initial-element nil)))
  (dotimes (i m)
    (setf (aref x i) (read)
	  (aref y i) (read)))
  (setf (aref red 0) t)
  (dotimes (i m)
    (let ((xi (1- (aref x i)))
	  (yi (1- (aref y i))))
      (if (aref red xi)
          (setf (aref red yi) t))
      (decf (aref w xi))
      (incf (aref w yi))
      (if (zerop (aref w xi))
	(setf (aref red xi) nil))))
    (format t "~A~%" (loop for ri across red unless (null ri) count ri)))
