(let ((xyz (make-array 3)))
  (dotimes (i 3)
    (setf (aref xyz i) (read)))
  (let* ((n (+ (aref xyz 0) (aref xyz 1) (aref xyz 2)))
         (data (make-array (* n 3)))
         (gots (make-array n :initial-element t))
         (total 0))
    (dotimes (i n)
      (setf (aref data (* i 3)) (list (read) i 0)
	    (aref data (+ 1 (* i 3))) (list (read) i 1)
	    (aref data (+ 2 (* i 3))) (list (read) i 2)))
    (setf data (sort (copy-seq data) #'> :key #'first))
    (loop for i from 0 below (* n 3)
	  for (v row col) = (aref data i)
	  with cnts = (make-array 3 :initial-element 0)
	  with flags = (make-array 3 :initial-element t)
	  until (every #'null flags) do
	  (if (and (aref gots row)
		   (aref flags col))
	    (setf (aref gots row) nil
		  total (+ total v)
		  (aref cnts col) (1+ (aref cnts col))))
	  (if (= (aref cnts col) (aref xyz col))
	    (setf (aref flags col) nil)))
    (format t "~A~%" total)))
